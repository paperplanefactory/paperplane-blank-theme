// main: ../style.scss
@mixin flex-wrap {
	display: -webkit-flex !important;
	display: flex !important;
	-webkit-flex-wrap: wrap !important;
	flex-wrap: wrap !important;
}

@mixin define-flex-per-row($row_items) {
	-webkit-flex: 0 0 $row_items;
	flex: 0 0 $row_items;
}

@mixin flex-verticalize {
	-webkit-align-items: center;
	align-items: center;
}

@mixin flex-end {
	-webkit-justify-content: flex-end;
	justify-content: flex-end;
}

@mixin reset-button {
	padding: 0;
	margin: 0;
	cursor: pointer;
	border: none !important;
	background-color: transparent !important;
	line-height: normal;
	-webkit-appearance: none !important;
}

@mixin define-blur($blur_me) {
	filter: blur($blur_me);
	-webkit-filter: blur($blur_me);
	-moz-filter: blur($blur_me);
	-o-filter: blur($blur_me);
	-ms-filter: blur($blur_me);
}

@mixin define-transform($transforms) {
	-webkit-transform: $transforms;
	transform: $transforms;
}

// typography
@mixin define-hyphens {
	word-wrap: break-word;
	overflow-wrap: break-word;
	-webkit-hyphens: auto;
	-ms-hyphens: auto;
	hyphens: auto;
}

// Rotate
@mixin define-rotate ($deg) {
	@include define-transform(rotate(#{$deg}deg));
}

// Scale
@mixin define-scale($scale) {
	@include define-transform(scale($scale));
}

// Translate
@mixin define-translate ($x, $y) {
	@include define-transform(translate($x, $y));
}

// Skew
@mixin define-skew ($x, $y) {
	@include define-transform(skew(#{$x}deg, #{$y}deg));
}















// Usage:   @include transition(width, height 0.3s ease-in-out);
// Output:  -webkit-transition(width 0.2s, height 0.3s ease-in-out);
//          transition(width 0.2s, height 0.3s ease-in-out);
//
// Pass in any number of transitions
@mixin transition($transitions...) {
	$unfoldedTransitions: ();

	@each $transition in $transitions {
		$unfoldedTransitions: append($unfoldedTransitions, unfoldTransition($transition), comma);
	}

	-webkit-transition: $unfoldedTransitions;
	transition: $unfoldedTransitions;
}

@function unfoldTransition ($transition) {
	// Default values
	$property: all;
	$duration: .2s;
	$easing: null; // Browser default is ease, which is what we want
	$delay: null; // Browser default is 0, which is what we want
	$defaultProperties: ($property, $duration, $easing, $delay);

	// Grab transition properties if they exist
	$unfoldedTransition: ();

	@for $i from 1 through length($defaultProperties) {
		$p: null;

		@if $i <=length($transition) {
			$p: nth($transition, $i)
		}

		@else {
			$p: nth($defaultProperties, $i)
		}

		$unfoldedTransition: append($unfoldedTransition, $p);
	}

	@return $unfoldedTransition;
}